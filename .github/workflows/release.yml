name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.1.1)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: ""
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            suffix: ""
          - os: macos-latest
            target: x86_64-apple-darwin
            suffix: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            suffix: ""

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install system dependencies
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get update && sudo apt-get install -y libdbus-1-dev pkg-config build-essential perl make && sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y && sudo apt update && sudo apt install gcc-11 g++-11 -y

    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      run: |
        # Install OpenSSL for both architectures
        brew install openssl
        # Install build tools needed for vendored OpenSSL compilation
        brew install perl make
        # Set up environment variables for cross-compilation
        echo "OPENSSL_DIR=$(brew --prefix openssl)" >> $GITHUB_ENV
        echo "OPENSSL_LIB_DIR=$(brew --prefix openssl)/lib" >> $GITHUB_ENV
        echo "OPENSSL_INCLUDE_DIR=$(brew --prefix openssl)/include" >> $GITHUB_ENV

    - name: Install gcc-11
      if: matrix.os == 'ubuntu-latest'
      run: sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 100

    - name: Install g++-11
      if: matrix.os == 'ubuntu-latest'
      run: sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11 100


    - name: Install musl tools
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: sudo apt-get install -y musl-tools

    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Build      
      env:
        # Add math library for MUSL targets
        RUSTFLAGS: ${{ matrix.target == 'x86_64-unknown-linux-musl' && '-C link-arg=-lm' || '' }}
        # For cross-compilation, disable pkg-config to avoid conflicts
        PKG_CONFIG_ALLOW_CROSS: 1
        # For macOS cross-compilation, use the OpenSSL from Homebrew
        OPENSSL_STATIC: 1
      run: cargo build --release --target ${{ matrix.target }}

    - name: Create archive
      shell: bash
      run: |
        cd target/${{ matrix.target }}/release
        tar czf ../../starknet-remote-signer-${{ matrix.target }}.tar.gz starknet-remote-signer

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: starknet-remote-signer-${{ matrix.target }}
        path: target/starknet-remote-signer-${{ matrix.target }}.tar.gz

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    name: Create Release
    needs: [build, docker]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          starknet-remote-signer-*/starknet-remote-signer-*.tar.gz
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 